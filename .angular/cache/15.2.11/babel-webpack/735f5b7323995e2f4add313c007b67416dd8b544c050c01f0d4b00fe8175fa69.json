{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/service-worker\";\nimport * as i3 from \"@angular/router\";\nexport let PushNotificationService = /*#__PURE__*/(() => {\n  class PushNotificationService {\n    constructor(http, swPush, router) {\n      this.http = http;\n      this.swPush = swPush;\n      this.router = router;\n      this.swPush.notificationClicks.subscribe(result => {\n        console.log('clicou na notificação', result);\n        if (result.action === 'listar') {\n          this.router.navigate([result.action]);\n        }\n      });\n    }\n    adicionaPushSubscriber() {\n      this.swPush.requestSubscription({\n        serverPublicKey: environment.VAPID_PUBLIC_KEY\n      }).then(sub => {\n        console.log('Usuário inscrito', sub);\n        this.http.post(environment.API + '/api/notificacao', sub).subscribe(() => console.log('Inscrição adicionada com sucesso!'), err => console.error('Erro ao adicionar inscrição.', err));\n      }).catch(err => console.error('Erro ao se inscrever', err));\n    }\n    enviar() {\n      this.http.post(environment.API + '/api/notificacao/enviar', null).subscribe(() => console.log('Notificação enviada com sucesso!'), err => console.error('Erro ao enviar notificação.', err));\n    }\n    static #_ = this.ɵfac = function PushNotificationService_Factory(t) {\n      return new (t || PushNotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SwPush), i0.ɵɵinject(i3.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PushNotificationService,\n      factory: PushNotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PushNotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}